{

 :devices {
           :sculpt-keyboard [{:product_id 1957 :vendor_id 1118}]
           }

 :simlayers {
             :f-mode {:key :f}    ; delimeters    ( ) [ ] { } and other symbols ~ $ &
             :d-mode {:key :d}    ; arithmetic    + - * / = % < > #
             :s-mode {:key :s}    ; punctuation   ? ! : ; ' " ` ~
             :a-mode {:key :a}    ; navigation hjkl + tab + enter + page down/up
             ;
             :q-mode {:key :q}    ; General shortcuts (browser etc.) - not settled
             :r-mode {:key :r}    ; Selection left and right (letter, word, line)
             :w-mode {:key :w}    ; Movement left and right (letter, word, line)
             :e-mode {:key :e}    ; Deletion left and right (letter, word, line)
             ;
             :g-mode {:key :g}    ; Mouse scroll, desktop left-right, zoom in-out, screenshot (not implemented)
             ;
             :v-mode {:key :v}    ; Number pad with + - BS ENTER as well
             :c-mode {:key :c}    ; Slashes and lines  ^ | \ _ @
             :x-mode {:key :x}    ; Some multi-character shortcuts like <= (not implemented)
             :z-mode {:key :z}    ; Volume and brightness
             }

 :main [

        {:des "Swap Win and Alt on Sculpt keyboard"
         :rules [:sculpt-keyboard
                 [:left_option :left_command]
                 [:left_command :left_option]
                 [:right_option :right_command]
                 [:application :right_option]
                 ]
         }

        {:des "CAPSLOCK is command if pressed in combination, otherwise ESC"
         :rules  [
            [:##caps_lock        :left_command     nil         {:alone :escape}]
          ]}
        
        {:des "Quote is command if pressed in combination, otherwise quote"
          :rules  [
              [:quote        :right_command     nil         {:alone :quote}]
            ]}
        
        {:des "Slash is shift if pressed in combination, otherwise slash"
          :rules  [
              [:slash        :right_shift     nil         {:alone :slash}]
            ]}

        {:des "Grave accent is shift if pressed in combination, otherwise grave accent"
          :rules  [
              [:grave_accent_and_tilde        :right_shift     nil         {:alone :grave_accent_and_tilde}]
            ]}

        {:des "f-mode for delimeters and ! ? $"
         :rules [:f-mode
                 ;; u i j k m comma -> !Sopen_bracket !Sclose_bracket !S9 !S0 open_bracket close_bracket
                 [:##u :!Sopen_bracket]
                 [:##i :!Sclose_bracket]
                 [:##j :!S9]
                 [:##k :!S0]
                 [:##m :open_bracket]
                 [:##comma :close_bracket]
                 ;; o l period -> !S1 !Sslash !S4
                 [:##o :!S1]
                 [:##l :!Sslash]
                 [:##period :!S4]
                ]
         }

        {:des "d-mode for arithmetic"    ;;    < > #    + - =    * / %
         :rules [:d-mode
                  [:##u     :!Scomma]               ; d -> o        <
                  [:##i    :!Speriod]               ; d -> p        >
                  [:##o         :!S3]               ; d -> o        #

                  [:##j         :!Sequal_sign]      ; d -> j        +
                  [:##k         :hyphen]            ; d -> k        -
                  [:##l         :equal_sign]        ; d -> l        =

                  [:##m :!S8]                       ; d -> m        *
                  [:##comma :slash]                 ; d -> ,        /
                  [:##period :!S5]                  ; d -> .        %
                ]
         }

        {:des "s-mode for punctuation"   ;;    ' " `    , . &    ; : ~
         :rules [:s-mode
                 [:##u :quote]
                 [:##i :!Squote]
                 [:##o :grave_accent_and_tilde]
                 [:##j :comma]
                 [:##k :period]
                 [:##l :!S7]
                 [:##m :semicolon]
                 [:##comma :!Ssemicolon]
                 [:##period :!Sgrave_accent_and_tilde]
                ]
         }

        {:des "a-mode for hjkl movement and nm enter and ui tab and ,. PageDn/Up"
         :rules [:a-mode
                  [:##j :left_arrow]
                  [:##k :down_arrow]
                  [:##l :up_arrow]
                  [:##semicolon :right_arrow]
                  [:##n :return_or_enter]
                  [:##m :return_or_enter]
                  [:##i :tab]
                  [:##o :tab]
                  [:comma :page_down]
                  [:period :page_up]
                ]
         }

        {:des "e-mode for deleting characters with ui, words with jk and lines with hl"
         :rules [:e-mode
                  [:##i         :delete_or_backspace]   ; r -> i   Delete character backwards
                  [:##o         :delete_forward]        ; r -> o   Delete character backwards
                  [:##k         :!Odelete_or_backspace] ; r -> k   Delete word backwards
                  [:##l         :!Odelete_forward]      ; r -> l   Delete word forwards
                  [:##j         :!Cdelete_or_backspace] ; r -> j   Delete to beginning of line
                  [:##semicolon :!Cdelete_forward]      ; r -> ;   Delete to end of line
                ]
         }

        {:des "w-mode allows for easy back and forth one character, word or line"
         :rules [:w-mode
                  [:##i         :left_arrow]          ; e -> i    Left
                  [:##o         :right_arrow]         ; e -> o    Right
                  [:##k         :!Oleft_arrow]        ; e -> k    Opt+Left
                  [:##l         :!Oright_arrow]       ; e -> l    Opt+Right
                  [:##j         :!Cleft_arrow]        ; e -> j    Cmd+Left
                  [:##semicolon :!Cright_arrow]       ; e -> ;    Cmd+Right
                  [:n           :return_or_enter]     ; e -> n    Enter
                  [:m           :return_or_enter]     ; e -> m    Enter
                ]
         }

        {:des "r-mode = w-mode + SHIFT (i.e. selection, not just movement)"
         :rules [:r-mode
                  [:##i         :!Sleft_arrow]         ; e -> i    Shift+Left
                  [:##o         :!Sright_arrow]        ; e -> o    Shift+Right
                  [:##k         :!SOleft_arrow]        ; e -> k    Shift+Opt+Left
                  [:##l         :!SOright_arrow]       ; e -> l    Shift+Opt+Right
                  [:##j         :!SCleft_arrow]        ; e -> j    Shift+Cmd+Left
                  [:##semicolon :!SCright_arrow]       ; e -> ;    Shift+Cmd+Right
                ]
         }

        {:des "q-mode for general shortcuts like browser tab navigation"
         :rules [:q-mode
                  [:##j :!CSopen_bracket]  ; q -> j    tab to the left:  Cmd-{
                  [:##k :!CSclose_bracket] ; q -> k    tab to the right: Cmd-}
                  [:##l :!TCf           ]  ; q -> l    toggle full screen: ^âŒ˜F
                  [:##u :!Cclose_bracket]  ; q -> u    browser back:     Cmd-[
                  [:##i :!Cclose_bracket]  ; q -> i    browser forward:  Cmd-]
                  [:##o :f2             ]  ; q -> o    F2 (useful in Excel)
                  [:##p :f4             ]  ; q -> p    F4 (useful in Excel)
                ]
         }

        {:des "v-mode for number pad"
         :rules [:v-mode
                 [:u :7]
                 [:i :8]
                 [:o :9]
                 [:j :4]
                 [:k :5]
                 [:l :6]
                 [:m :1]
                 [:comma :2]
                 [:period :3]
                 [:p :!Sequal_sign]
                 [:semicolon :hyphen]
                 [:slash :return_or_enter]
                 [:y :delete_or_backspace]
                 [:h :period]
                 [:n :0]
                ]
        }

        {:des "c-mode for remaining symbols ^ | \\ _ @"
         :rules [:c-mode
                 [:##u :!S6]
                 [:##j :!Sbackslash]
                 [:##k :!S2]
                 [:##m :backslash]
                 [:##comma :!Shyphen]
                ]
        }

        {:des "z-mode for volume and brightness"
         :rules [:z-mode
                 [:##u :display_brightness_decrement] ; z -> j   Mute volume
                 [:##i :display_brightness_increment]  ; z -> k   Increase brightness
                 [:##j :volume_decrement] ; z -> u   Increase volume
                 [:##k :volume_increment] ; z -> i   Decrease volume
                 [:##m :mute]  ; z -> m   Mute volume
                ]
        }

        #_{:des "x-mode for some programming pairs like <= (not yet implemented)"
         :rules [:x-mode
                ]
        }

        #_{:des "g-mode for mouse scroll, desktop left-right, zoom in-out, screenshot"
         :rules [:g-mode
                ]
        }

        ;; Using keys for CTRL etc (home-row-mods) isn't practical with plain Karabiner.
        ;; Some changes to timeout settings would be required, and the documentation is 
        ;; not clear enough.
        #_{:des "Convenient CTRL (T,Y) and COMMAND (G,H)"
         :rules  [
            [:##t        :left_control     nil         {:alone :t}]
            [:##y        :left_control     nil         {:alone :y}]
            [:##g        :left_command     nil         {:alone :g}]
            [:##h        :left_command     nil         {:alone :h}]
          ]}

        ;; {:des "g is command if pressed in combination, otherwise g"
        ;;   :rules  [
        ;;       [:g        :left_command     nil         {:alone :g}]
        ;;     ]}

        ;; {:des "h is command if pressed in combination, otherwise h"
        ;;   :rules  [
        ;;       [:h        :right_command     nil         {:alone :h}]
        ;;     ]}

 ]
}