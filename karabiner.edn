{:profiles {:Default {:default true
                      ;; simultaneous_threshold_milliseconds (def: 50)
                      ;; keys need to be pressed within this threshold to be considered simultaneous
                      :sim     50
                      ;; to_delayed_action_delay_milliseconds (def: 500)
                      ;; basically it means time after which the key press is count delayed
                      :delay   500
                      ;; to_if_alone_timeout_milliseconds (def: 1000)
                      ;; hold for 995s and single tap registered; hold for 1005s and the to_if_alone event is canceled ("timed out"):
                      ;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/to-if-alone/
                      :alone   1000
                      ;; to_if_held_down_threshold_milliseconds (def: 500)
                      ;; key is fired twice when 500 ms is elapsed (otherwise seen as a hold command)
                      ;; increase this value to allow you to hold a simlayer key longer before the next key is pressed
                      :held    1000}}

 :devices {
           :sculpt-keyboard [{:product_id 1957 :vendor_id 1118}]
           }

 :templates {
             :yabai-focus-space    "/usr/local/bin/yabai -m space --focus \"%s\""
             ;; :yabai-create-space    "/usr/local/bin/yabai -m space --focus \"%s\""
             }

 :simlayers {
             :fencing-mode {:key :a}      ; delimeters    ( ) [ ] { } ' " and other symbols ! \ $ &
             :equations-mode {:key :e}    ; arithmetic    + - * / = % < > #
             :adventure-mode {:key :f}    ; navigation    arrows, tab, enter, page down/up
             ;
             :windows-mode {:key :w}      ; General shortcuts (browser etc.)
             :select-mode {:key :s}       ; Selection in all directions, add cursors, cut, copy, paste
             :delete-mode {:key :d}       ; Deletion left and right (letter, word, line), undo, redo
             :num-mode {:key :spacebar}   ; number row and symbols
             ;
             :r-mode {:key :r}            ; Slashes and lines  ^ | \ _ @
             :q-mode {:key :q}            ; Volume and brightness
             }

 :main [

        #_{:des "Press right_shift twice to enter double shift mode, press right_shift once to leave it"
         :rules [[:right_shift ["double-right-shift-mode" 1] ["shift-pressed-once" 1]]
                 [:right_shift [:right_shift ["shift-pressed-once" 1]] ["double-right-shift-mode" 0] {:delayed {:invoked ["shift-pressed-once" 0] :canceled ["shift-pressed-once" 0]}}]
                 :double-right-shift-mode
                 [:right_shift ["double-right-shift-mode" 0]]
                ]}

        #_{:des "alternative num-mode for numbers on home row, and symbols"
         :rules [:double-right-shift-mode
                  [:a :1]
                  [:s :2]
                  [:d :3]
                  [:f :4]
                  [:g :5]
                  [:h :6]
                  [:j :7]
                  [:k :8]
                  [:l :9]
                  [:semicolon :0]
                  [:u :!Sequal_sign]
                  [:i :hyphen]
                  [:n :return_or_enter]
                  [:m :delete_or_backspace]
                ]}

        {:des "Easy modifier keys and other combos"
         :rules [
                 [[:w :e] :escape]              ; pick the best
                ;;  [[:x :c] :escape]             ; pick the best
                ;;  [[:c :v] :escape]              ; pick the best
                ;;  [[:m :comma] :return_or_enter]         ; pick the best
                ;;  [[:comma :period] :return_or_enter]    ; pick the best

                 ;; Left hand homerow mods
                 [[:f :d] :left_shift]     ; _ _ O O      -> shift
                 [[:d :s] :left_command]   ; _ O O _      -> command
                 [[:s :a] :left_option]    ; O O _ _      -> option
                 [[:f :a] :left_control]   ; O _ _ O      -> control

                 [[:f :s] :!Cleft_shift]   ; _ O _ O      -> cmd + shift
                 [[:d :a] :!Cleft_option]  ; O _ O _      -> cmd + opt
                 [[:g :d] :!Cleft_control] ; _ _ O _ O    -> cmd + ctrl
                 [[:g :s] :!Sleft_option]  ; _ O _ _ O    -> shift + opt      
                 [[:g :a] :!Sleft_control] ; O _ _ _ O    -> shift + ctrl            

                ;;  [[:g :d] :!Sleft_command]                        
                ;;  [[:g :s] :!Sleft_option]                        
                ;;  [[:g :a] :!Sleft_control]                        
                ;;  [[:f :s] :!Cleft_option]                        
                ;;  [[:d :a] :!Cleft_control]                        
                
                ;;  [[:f :d :s] :!Sleft_command nil {:params {:simultaneous_threshold_milliseconds 200}}]             ; fds -> shift + command
                ;;  [[:f :d :a] :!Sleft_option nil {:params {:simultaneous_threshold_milliseconds 200}}]              ; fda -> shift + option
                ;;  [[:f :s :a] :!Sleft_control nil {:params {:simultaneous_threshold_milliseconds 200}}]             ; fsa -> shift + control
                ;;  [[:d :s :a] :!Cleft_option nil {:params {:simultaneous_threshold_milliseconds 200}}]              ; dsa -> command + option
                ;;  [[:e :r] :!Cleft_control]                                                                         ; er -> command + control

                 ;; Right hand homerow mods
                 [[:j :k] :right_shift]             ; O O _ _      -> shift 
                 [[:k :l] :right_command]           ; _ O O _      -> command
                 [[:l :semicolon] :right_option]    ; _ _ O O      -> option
                 [[:j :semicolon] :right_control]   ; O _ _ O      -> control

                 [[:j :l] :!Cright_shift]           ;   O _ O _    -> cmd + shift
                 [[:k :semicolon] :!Cright_option]  ;   _ O _ O    -> cmd + opt
                 [[:h :k] :!Cright_control]         ; O _ O _ _    -> cmd + ctrl
                 [[:h :l] :!Sright_option]          ; O _ _ O _    -> shift + opt
                 [[:h :semicolon] :!Sright_control] ; O _ _ _ O    -> shift + ctrl

                ;;  [[:j :k :l] :!Sright_command nil {:params {:simultaneous_threshold_milliseconds 200}}]            ; jkl -> shift + command
                ;;  [[:j :k :semicolon] :!Sright_option nil {:params {:simultaneous_threshold_milliseconds 200}}]     ; jk; -> shift + option
                ;;  [[:j :l :semicolon] :!Sright_control nil {:params {:simultaneous_threshold_milliseconds 200}}]    ; jl; -> shift + control
                ;;  [[:k :l :semicolon] :!Cright_option nil {:params {:simultaneous_threshold_milliseconds 200}}]     ; kl; -> command + option
                ;;  [[:u :i] :!Cright_control]                                                                        ; ui  -> command + control
                ]}     

        {:des "fencing-mode for delimeters and ! ? $"   ;;    { } ! \    ( ) ' "     [ ] $
         :rules [:fencing-mode     
                 [:##u         :!Sopen_bracket]    ; f -> u        {
                 [:##i         :!Sclose_bracket]   ; f -> i        }
                 [:##o         :!S1]               ; f -> o        !
                 [:##p         :backslash]         ; f -> p        \

                 [:##j         :!S9]               ; f -> j        (
                 [:##k         :!S0]               ; f -> k        )
                 [:##l         :quote]             ; f -> l        '
                 [:##semicolon :!Squote]           ; f -> ;        "

                 [:##m         :open_bracket]      ; f -> m        [
                 [:##comma     :close_bracket]     ; f -> ,        ]
                 [:##period    :!S4]               ; f -> .        $
                 [:##slash     :!S7]               ; f -> /        &
                ]}

        {:des "equations-mode for arithmetic"           ;;    < > ^ #    _ - + =     * / %
         :rules [:equations-mode
                  [:##u     :!Scomma]               ; u  ->  <
                  [:##i     :!Speriod]              ; i  ->  >
                  [:##o     :!S6]                   ; o  ->  ^
                  [:##p     :!O3]                   ; ;  ->  #

                  [:##j         :!Shyphen]          ; j  ->  _
                  [:##k         :hyphen]            ; k  ->  -
                  [:##l         :!Sequal_sign]      ; l  ->  +
                  [:##semicolon :equal_sign]        ; ;  ->  =

                  [:##m :!S8]                       ; m  ->  *
                  [:##comma :slash]                 ; ,  ->  /
                  [:##period :!S5]                  ; .  ->  %
                ]}

        {:des "delete-mode for deleting characters with ui, words with jk and lines with hl"
         :rules [:delete-mode
                  [:##u         :!Cdelete_or_backspace] ; u  ->  Delete line backwards
                  [:##i         :!Cdelete_forward]      ; i  ->  Delete line fowards
                  [:##j         :!Odelete_or_backspace] ; j  ->  Delete word backwards
                  [:##k         :!Odelete_forward]      ; k  ->  Delete word forwards
                  [:##l         :delete_or_backspace]   ; l  ->  Delete character backwards
                  [:##semicolon :delete_forward]        ; ;  ->  Delete character forwards
                  [:##n         :!Cz]                   ; n  ->  Undo
                  [:##h         :!CSz]                  ; h  ->  Redo
                  [:##m         :!Cdelete_or_backspace] ; m  ->  move file to trash
                  ;; [:##m         :delete_or_backspace]   ; m  ->  Delete character backwards
                  ;; [:##comma     :delete_forward]        ; ,  ->  Delete character forwards
                ]}

        {:des "adventure-mode allows for easy back and forth one character, word or line"
         :rules [:adventure-mode
                  [:##u         :!Cleft_arrow]        ; i  ->  Cmd+Left
                  [:##i         :!Cright_arrow]       ; o  ->  Cmd+Right
                  [:##o         :tab]                 ; o  ->  Tab

                  [:##j         :!Oleft_arrow]        ; j  ->  Opt+Left
                  [:##k         :!Oright_arrow]       ; k  ->  Opt+Right
                  [:##l         :left_arrow]          ; l  ->  Left
                  [:##semicolon :right_arrow]         ; ;  ->  Right

                  [:##n         :return_or_enter]     ; n  ->  Enter
                  [:##m         :down_arrow]          ; m  ->  Down
                  [:##comma     :up_arrow]            ; ,  ->  Up
                  
                  ;; [:##h         :page_down]           ; h  ->  Page Down (moves cursor in vscode, not in notes)
                  ;; [:##y         :page_up]             ; y  ->  Page Up (moves cursor in vscode, not in notes)
                  [:##h         [:page_down :!Tl]]    ; h  ->  Page Down and centre cursor (works in vscode, not notes)
                  [:##y         [:page_up :!Tl]]      ; y  ->  Page Up and centre cursor (works in vscode, not notes)
                  [:##p         :!Tl]                 ; p  ->  Center cursor

                  [:##period    :!Odown_arrow]        ; ,  ->  Move down at indentation level (requires "indentation level movement extension")
                  [:##slash    :!Oup_arrow]           ; /  ->  Move up at indentation level (requires "indentation level movement extension")
                  
                  ;; [:##h         [:!Opage_down :!Tl]]                     ; h  ->  Page Down and centre cursor (works in notes, not vscode)
                  ;; [:##y         [:!Opage_up :!Tl]]                       ; y  ->  Page Up and centre cursor (works in notes, not vscode)
                  ;; [:##h         :!OFdown_arrow]                          ; h  ->  Page Down and centre cursor (works in notes, not vscode)
                  ;; [:##y         :!OFup_arrow]                            ; y  ->  Page Up and centre cursor (works in notes, not vscode)
                  ;; [:##h         [:!OFdown_arrow :!Tl]  :adventure-mode]  ; h  ->  Page Down and centre cursor (works in notes, not vscode)
                  ;; [:##y         [:!OFup_arrow :!Tl]    :adventure-mode]  ; y  ->  Page Up and centre cursor (works in notes, not vscode)
                ]}

        {:des "select-mode = adventure-mode + SHIFT (i.e. selection, not just movement)"
         :rules [:select-mode
                  [:##u         :!SCleft_arrow]       ; u  ->  Shift+Cmd+Left
                  [:##i         :!SCright_arrow]      ; i  ->  Shift+Cmd+Right
                  [:##o         :!Sdown_arrow]        ; i  ->  Shift+Down
                  [:##p         :!Sup_arrow]          ; o  ->  Shift+Up
                  [:##y         :!OCup_arrow]         ; y  ->  Add cursor above
                  [:##h         :!OCdown_arrow]       ; h  ->  Add cursor below
                  [:##j         :!SOleft_arrow]       ; j  ->  Shift+Opt+Left
                  [:##k         :!SOright_arrow]      ; k  ->  Shift+Opt+Right
                  [:##l         :!Sleft_arrow]        ; l  ->  Shift+Left
                  [:##semicolon :!Sright_arrow]       ; ;  ->  Shift+Right
                  [:##n         :!Cx]                 ; n  ->  Cut
                  [:##m         :!Cc]                 ; m  ->  Copy
                  [:##comma     :!Cv]                 ; ,  ->  Paste
                  [:##period    :!COc]                ; .  ->  Copy path directory
                  [:##slash     :!COv]                ; /  ->  Move (paste) file to current directory (after copying file)
                ]}

        {:des "windows-mode for general shortcuts like browser tab navigation"
         :rules [:windows-mode
                  [:##j :!CSopen_bracket]                                        ; j  ->  tab to the left:       Cmd+{
                  [:##k :!CSclose_bracket]                                       ; k  ->  tab to the right:      Cmd+}
                  [:##l :!Ctab]                                                  ; l  ->  change app:            Cmd+Tab
                  [:##semicolon :!Cgrave_accent_and_tilde]                       ; ;  ->  change window: Cmd+`
                  [:##o "open -a Raycast"]                                       ; o  ->  open Raycast
                  [:##p :!CTf]                                                   ; p  ->  Full-screen mode
                  ;; [:##u :!Copen_bracket]                                      ; u  ->  browser back:          Cmd+[
                  ;; [:##i :!Cclose_bracket]                                     ; i  ->  browser forward:       Cmd+]                 
                  ;; [:##h "osascript /Users/harris/Documents/applescripts/toggle_voice_control.scpt"]
                  [:##u [:yabai-focus-space "prev"]]                             ; u  ->  desktop left using yabai
                  [:##i [:yabai-focus-space "next"]]                             ; i  ->  desktop right using yabai
                  [:##h "/usr/local/bin/yabai -m space --create"]                ; h  ->  yabai create empty space
                  [:##y "/usr/local/bin/yabai -m space --destroy"]               ; y  ->  yabai destroy space
                  ;; [[:u :i] "/usr/local/bin/yabai -m space --destroy"]         ; ui ->  yabai destroy space
                  ;; [:##u [:yabai-focus-space ""]]                              ; u  ->  yabai create new empty space
                  ;; [:##u :!Tleft_arrow]                                        ; u  ->  desktop left:          Ctrl+[
                  ;; [:##i :!Tright_arrow]                                       ; i  ->  desktop right:         Ctrl+]
                  ;; [:##n :!CSn]                                                ; n  ->  open private tab:      Cmd+shift-n
                  ;; [:##m :!CSm]                                                ; m  ->  switch brave profile:  Cmd+shift-m
                  [:##n "/usr/local/bin/yabai -m window --space next"]           ; n  ->  yabai move window to next space (n for next)
                  [:##m "/usr/local/bin/yabai -m window --toggle float"]         ; m  ->  yabai make window float (i.e not tiled)
                  [:##comma "/usr/local/bin/yabai -m window --opacity 0.9"]      ; ,  ->  yabai make window 90% opacity (and auto manage turns off)
                  [:##period "/usr/local/bin/yabai -m window --opacity 0.0"]     ; .  ->  yabai make window 100% opacity and automatically managed
                ]}

        {:des "num-mode for numbers on home row, and symbols"
         :rules [:num-mode
                  [:a :1]
                  [:s :2]
                  [:d :3]
                  [:f :4]
                  [:g :5]
                  [:h :6]
                  [:j :7]
                  [:k :8]
                  [:l :9]
                  [:semicolon :0]
                  [:u :!Sequal_sign]
                  [:i :hyphen]
                  [:n :return_or_enter]
                  [:m :delete_or_backspace]
                ]}

        {:des "r-mode for remaining symbols ^ | \\ _ @"
         :rules [:r-mode
                 [:##u :!S6]
                 [:##j :!Sbackslash]
                 [:##k :!S2]
                 [:##m :backslash]
                 [:##comma :!Shyphen]
                ]}
        
        {:des "q-mode for volume and brightness"
         :rules [:q-mode
                 [:##l :display_brightness_decrement]         ; j  ->  Mute volume
                 [:##semicolon :display_brightness_increment] ; k  ->  Increase brightness
                 [:##j :volume_decrement]                     ; u  ->  Increase volume
                 [:##k :volume_increment]                     ; i  ->  Decrease volume
                 [:##m :mute]                                 ; m  ->  Mute volume
                ]}
 ]
}

;; each manipulator has a description and multiple rules

;;{:des "..."                                       ;; -> description
;; :rules[[:condi <conditions which apply to all rules below>]
;;          [<from>  <to>  <conditions which apply to this rule>]            ;; -> rule 1
;;          [<from>  <to>  <conditions which apply to this rule>]            ;; -> rule 2
;; ]}

;; or
;;{:des "..."                                       ;; -> description
;; :rules[<condition which applies to all rules below>
;;          [<from>  <to>  <conditions which apply to this rule>]            ;; -> rule 1
;;          [<from>  <to>  <conditions which apply to this rule>]            ;; -> rule 2
;; ]}
;; if there is only one condition

;; rule [:period ["period-mode" 1] nil {:afterup ["period-mode" 0] :alone :period}]
;;       |_____| |_______________| |_| |_________________________________________|
;;        <from>    <to>      <conditions>         <other options>
;;                                ^^^ "nil" in the <conditions> means "no condition"
;;
;; !  | means mandatory -   modifier(s) alone when pressed change behavior
;; #  | means optional  -   modifiers are optional (but atleast one necessary)
;;
;; :!Ca is keycode :a and prefix a with !C
;;
;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift
;; P  | caps_lock
;;
;; Prefixes S, O, T, C correspond to Shift, Option, Control, Command. Put them in front of the key
;; to get the modified version. For example, :!SCleft_arrow is Shift+Command+Left arrow.
;;
;; ## | optional any (this has no effect when used on the RHS; only LHS)
;; !  | all modifiers mandatory
;; !! | command + control + option + shift (hyper)
;;
;; to understand better how modifiers work in karabiner
;; karabiner definition of mandatory and optional
;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/
;;
;; need to prefix C T O S F P with ! or #
;;
;; code for all this:
;; https://github.com/yqrashawn/GokuRakuJoudo/blob/b9b334a187379f9bc8182ad59e2cca2a1789e9c0/src/karabiner_configurator/keys.clj#L68 
;;
;;
;; list of keys usable in Karabiner
;; https://github.com/pqrs-org/Karabiner-Elements/issues/925#issuecomment-323984568
;;
;; Sample mouse event remapping
;; Could be used in a layer. Intercepting events from mice interferes with the scrollwheel.
;; [{:pkey :button2} :delete_forward]
;;
;;
;; URL of extend layer - https://forum.colemak.com/topic/2014-extend-extra-extreme/